Database : berlintest
Restore  : No 

Operator : connect
Number   : 1  
Signature: text  x int x text -> bool
Example  : query connect('localhost', 1234, 'SecondoConfig.ini')
Result   : FALSE


Operator : checkConnections 
Number   : 1  
Signature: -> strean(tuple)
Example  : query checkConnections() count
Result   : 0

Operator : rcmd 
Number   : 1  
Signature: int x {string,text} -> stream(tuple)
Example  : query rcmd(0,'list databases') count
Result   : 0

Operator : disconnect
Number   : 1  
Signature: int -> int , -> int
Example  : query disconnect(0)
Result   : 0

Operator  : rquery
Number    : 1
Signature : int x {string,text} -> ANY
Example   : query rquery(0,'query ten count')
Result    : bug
Remark    : requires a remote server

Operator  : prcmd
Number    : 1
Signature : stream(tuple) x attrName x attrName -> stream(tuple + E)
Example   : query intstream(0,5) namedtransformstream[Server] extend[ W : 'open database berlintest'] prcmd[Server,W] tconsume
Result    : bug 
Remark    : requires a remote server

Operator  : sendFile
Number    : 1
Signature : int x {string, text} x {string, text} -> int 
Example   : query sendFile(0, 'local.txt', "remote.txt")
Result    : bug
Remark    : Requires a remote server

Operator  : requestFile
Number    : 1
Signature : int x {string, text} x {string, text} ->  int
Example   : query requestFile(0, 'remote.txt', "local.txt")
Result    : bug
Remark    : Requires a remote server


Operator  : psendFile
Number    : 1
Signature : stream(tuple) x ID x ID x ID -> stream(extend(tuple))
Example   : query filetable feed psendFile[ServerNo, LocalFileName, RemoteFileName] tconsume
Result    : bug
Remark    : Requires a remote server


Operator  : prequestFile
Number    : 1
Signature : stream(tuple) x ID x ID x ID -> stream(extend(tuple))
Example   : query filetable feed prequestFile[ServerNo, RemoteFileName, LocalFileName] tconsume
Result    : bug
Remark    : Requires a remote server

Operator  : getRequestFolder 
Number    : 1
Signature : int x bool -> text
Example   : query getRequestFolder(0, FALSE)
Result    : (text undefined)

Operator  : getSendFolder 
Number    : 1
Signature : int x bool -> text
Example   : query getSendFolder(0, FALSE)
Result    : (text undefined)

Operator : pconnect
Number   : 1
Signature: stream(tuple(X)) x id x id x id -> stream(tuple(X + CNo))
Example  : query connectTable feed pconnect[Host, Port, Config] tconsume
Result   : bug
Remark   : Requires a remote server


Operator : prquery
Number   : 1
Signature: stream(int) x {string.text} x int -> stream(Tuple(ServerNo : int, Result : text))
Example  : query intstream(0,3) prquery['query ten count', 0] tconsume
Result   : bug
Remark   : Requires a remote server

Operator : prquery2
Number   : 1
Signature: stream(tuple) x {string.text} x AttrName x AttrName x int x int  -> stream(tuple)
Example  : query partserver prquery2['query ten_PART_SERVER count', Server, Part, 0, 4] tconsume
Result   : bug
Remark   : Requires a remote server


Operator : put
Number   : 1
Signature: d[f]array(T) x int x T -> d[f]array(T)
Example  : query put([const darray(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))],3,27)
Result   : bug
Remark   : Requires a remote server

Operator : get
Number   : 1
Signature: d[f]array(T) x int -> T
Example  : query get([const darray(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))],3)
Result   : bug
Remark   : Requires a remote server

Operator : size
Number   : 1
Signature: d[f]array(T) -> int 
Example  : query size([const darray(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))])
Result   : 4

Operator : getWorkers 
Number   : 1
Signature: d[f]array(T) -> stream(tuple)
Example  : query getWorkers([const darray(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))]) count
Result   : 2


Operator  : fconsume5
Number    : 1
Signature : stream(TUPLE) x {string, text} -> stream(TUPLE)
Example   : query ten feed fconsume5['ten.bin'] count
Result    : 10

Operator  : fcount5
Number    : 1
Signature : {string, text, frel} -> int 
Example   : query "ten.bin" fcount5
Result    : 10

Operator  : ffeed5
Number    : 1
Signature : {string, text} -> stream(TUPLE) | frel(tuple(X)) -> stream(tuple(X))
Example   : query 'ten.bin' ffeed5  count
Result    : 10

Operator  : feed
Number    : 1
Signature : {string, text} -> stream(TUPLE) | frel(tuple(X)) -> stream(tuple(X))
Example   : query  createFrel('ten.bin') feed  count
Result    : 10

Operator  : createDArray
Number    : 1 
Signature : stream(TUPLE) x string x int x ANY [ x bool]   -> darray
Example   : query workers feed createDArray["DA1", 10, strassen, TRUE]
Result    : bug
Remark    : in development

Operator: pput
Number  : 1
Signature : d[f]array(T) x (int x t)+ -> d[f]array(T)
Example   : query da3 feed pput[0,ten,1,ten]
Result    : bug
Remark    : remote server required


Operator: ddistribute2
Number  : 1
Signature : stream(tuple(X)) x ident x int x rel x string -> darray(X) 
Example   : query strassen feed addcounter[No,0] ddistribute2["dstrassen", No, 5, workers] 
Result    : bug
Remark    : remote server required

Operator: ddistribute3
Number  : 1
Signature : stream(tuple(X)) x int x bool  x rel x string -> darray(rel(tuple(X))) 
Example   : query strassen feed  ddistribute3["dstrassen3", 10, TRUE, workers] 
Result    : bug
Remark    : remote server required

Operator: ddistribute4
Number  : 1
Signature : stream(tuple(X)) x (fun : tuple ->int) x int x rel x string -> darray(X) 
Example   : query strassen feed  ddistribute4["dstrassen4", hashvalue(.Name, 2000), 5 , workers] 
Result    : bug
Remark    : remote server required

Operator: closeWorkers
Number  : 1
Signature : -> int , d[f]array -> int
Example   : query closeWorkers() 
Result    : 0

Operator: showWorkers
Number  : 1
Signature : -> stream(tuple) , d[f]array -> stream(tuple)
Example   : query showWorkers() count
Result    : 0

Operator  : DARRAYELEM
Number    : 1
Signature : d[f]array(X) -> X
Example   : query da dloop["da3", fun( x : DARRAYELEM) x count ]
Result    : bug
Remark    : remote server required, Type Mapping Operator


Operator  : dloop 
Number    : 1
Signature : darray(X) x string x (X -> Y) -> darray(Y)
Example   : query da dloop["da3", fun( x : DARRAYELEM) x count ]
Result    : bug
Remark    : remote server required


Operator  : dmap
Number    : 1
Signature : dfarray x string x fun -> d[f]array
Example   : query da8 dmap["", . feed head[25] ]
Result    : bug
Remark    : in development

Operator  : pdmap
Number    : 1
Signature : stream(int) x dfarray x string x fun -> d[f]array
Example   : query intstream(0,10) filter [ (. mod 2 ) = 0] da8 pdmap["", . feed head[25] ]
Result    : bug
Remark    : in development

Operator  : dloop2 
Number    : 1
Signature : darray(X) x darray(Y) x string x (X x Y -> Z) -> darray(Z)
Example   : query da1 da2  dloop2["da3", . + .. ]
Result    : bug
Remark    : remote server required


Operator  : ARRAYFUNARG1 
Number    : 1
Signature : darray(X) x ... -> X | dfarray(rel(Y)) x ... -> frel(Y) 
Example   : query dfa1 dfa2  dmap2["da3", . feed  .. feed  product, 1238 ]
Result    : bug
Remark    : remote server required

Operator  : ARRAYFUNARG2
Number    : 1
Signature : ANY x darray(X) x ... -> X | ANY x dfarray(rel(Y)) x ... -> frel(Y) 
Example   : query dfa1 dfa2  dmap2["da3", . feed  .. feed product,1238 ]
Result    : bug
Remark    : remote server required

Operator  : DARRAYELEM2 
Number    : 1
Signature : d[f]array(X) x d[f]array(Y) x ... -> X
Example   : query da1 da2  dloop2["da3", . + .. ]
Result    : bug
Remark    : remote server required

Operator  : fdistribute5 
Number    : 1
Signature : stream(tuple) x {string,text} x int x attrname -> stream(tuple)
Example   : query (strassen feed addcounter[No,0] fdistribute5["strassen",5,No] count) = (strassen count)
Result    : TRUE

Operator  : fdistribute6 
Number    : 1
Signature : stream(tuple) x {string,text} x int -> stream(tuple)
Example   : query (strassen feed  fdistribute6['strassen6',1000] count) = (strassen count)
Result    : TRUE

Operator : dsummarize
Number   : 1
Signature : d[f]array(DATA) -> stream(DATA) , d[f]array(rel(X)) -> stream(X)
Example   : query da2 dsummarize count
Result    : bug
Remark    : remote server required


Operator : getValue
Number   : 1
Signature : d[f]array(X) -> array(X)
Example   : query da2 getValue
Result    : bug
Remark    : remote server required


Operator : getValueP
Number   : 1
Signature : pd[f]array(X) x X -> array(X)
Example   : query pda2 getValueP [-1]
Result    : bug
Remark    : remote server required

Operator  : deleteRemoteObjects
Number    : 1
Signature : d[f]array(X) [x int] -> int
Example   : query deleteRemoteObjects(da2)
Result    : bug
Remark    : remote server required

Operator  : killRemoteObjects
Number    : 1
Signature : d[f]array(X) [x int] -> int
Example   : query killRemoteObjects(da2)
Result    : bug
Remark    : remote server required

Operator  : clone 
Number    : 1
Signature : d[f]array(X) x string -> d[f]array(X)
Example   : query da8 clone["da9"]
Result    : bug
Remark    : remote server required

Operator  : share 
Number    : 1
Signature : string x bool [ x d[f]array] -> text
Example   : query share("ten", FALSE)
Result    : bug
Remark    : remote server required

Operator  : share2
Number    : 1
Signature : string x ANY x bool [ x d[f]array] -> text
Example   : query share2("ten", ten,  FALSE)
Result    : bug
Remark    : remote server required

Operator  : cleanUp 
Number    : 1
Signature : -> bool , d[f]array -> bool
Example   : query cleanUp(da8)
Result    : bug
Remark    : remote server required

Operator  : dfdistribute2
Number    : 1
Signature : stream(tuple(X)) x ident x int x rel x string -> dfarray(X) 
Example   : query strassen feed addcounter[No,0] dfdistribute2["dstrassen", No, 5, workers] 
Result    : crashes
Remark    : remote server required

Operator  : dfdistribute3
Number    : 1
Signature : stream(tuple(X)) x int x bool x rel x string -> dfarray(rel(tuple(X))) 
Example   : query strassen feed dfdistribute3["fstrassen", 10, TRUE, workers] 
Result    : bug
Remark    : remote server required


Operator  : dfdistribute4
Number    : 1
Signature : stream(tuple(X)) x (fun : tuple ->int) x int x rel x string -> darray(X) 
Example   : query strassen feed  dfdistribute4["dfstrassen4", hashvalue(.Name, 2000), 5, workers] 
Result    : bug 
Remark    : remote server required


Operator  : convertdarray
Number    : 1
Signature : darray -> dfarray , dfarray -> darray
Example   : query convertdarray(da8)
Result    : bug
Remark    : in development

Operator  : DFARRAYSTREAM 
Number    : 1
Signature : dfarray(rel(X)) x ... -> stream(X)
Example   : query da8 dmap["", . feed head[25] ]
Result    : bug
Remark    : in development

Operator  : gettuples
Number    : 1
Signature : stream(tuple) x {string,text} -> stream(tuple)
Example   : query strassenfile_btree exactmatchS["Hohe Strasse"] 'strassen.bin' gettuples tconsume
Result    : bug
Remark    : in development

Operator  : fileTransferServer
Number    : 1
Signature : int -> bool
Example   : query fileTransferServer(1238)
Result    : crashes
Remark    : Comes never back if no client connect to this server

Operator  : receiveFileClient
Number    : 1 
Signature : {string, text} x int x {string,text} x {string,text} -> bool
Example   : query receiveFileClient('server', 1238, 'remote.txt', 'local.txt')
Result    : FALSE

Operator  : transferFile
Number    : 1
Signature : int x int x int x {string,text} x {string,text}
Example   : query transferFile(0,1,1238,'Staedte.txt', "Staedte3.txt")
Result    : FALSE

Operator  : traceCommands
Number    : 1
Signature : bool -> bool
Example   : query traceCommands(FALSE);
Result    : TRUE

Operator  : showProgress 
Number    : 1
Signature : bool -> bool
Example   : query showProgress(TRUE)
Result    : TRUE

Operator  : staticFileTransferator
Number    : 1
Signature : int x int -> bool
Example   : query staticFileTransferator(1238,10)
Result    : TRUE

Operator  : killStaticFileTransferator
Number    : 1
Signature : int -> bool
Example   : query killStaticFileTransferator(1238)
Result    : bug
Remark    : depends on success of operation staticFileTransferator

Operator  : putFileTCP
Number    : 1
Signature : {string,text} x {string,text} x int x bool x {string,text} -> bool
Example   : query putFileTCP('berlintest', "localhost", 1238, FALSE, 'berlintest_copy')
Result    : FALSE

Operator  : getFileTCP
Number    : 1
Signature : {string,text} x {string,text} x int x bool x {string,text} -> bool
Example   : query getFileTCP('berlintest_copy', "localhost", 1238, FALSE, 'berlintest_copy3')
Result    : FALSE

Operator  : fsfeed5
Number    : 1
Signature : stream({text,string}) x {rel, text, string} -> stream(tuple)
Example   : query getDirectory('.') filter [ . startsWith "strassen_" ] fsfeed5[strassen] count
Result    : bug
Remark    : depends on existence of appropriate files

Operator  : fdistribute7
Number    : 1
Signature : stream(tuple) x (tuple->int) x int x {string,text} x bool -> stream(tuple)
Example   : query strassen feed fdistribute7["strassen7", hashvalue(.Name,997), 12, TRUE] count
Result    : 3212


Operator  : partition
Number    : 1
Signature : d[f]array x string x fun -> dmatrix
Example   : query size(s7 partition["m7", hashvalue(.Attr,23) , 0 ] )
Result    : bug
Remark    : remote server required

Operator  : SUBSUBTYPE1
Number    : 1
Signature : (x(b(c))) x ... -> c
Example   : query size(s7 partition[ "m7", hashvalue(.Attr,23) , 0 ] )
Result    : bug
Remark    : remote server required

Operator  : DFARRAYTUPLE
Number    : 1
Signature : dfarray(rel(X)) -> X 
Example   : query size(s7 partition["m7", hashvalue(.Attr,23) , 0] )
Result    : bug
Remark    : requires a remote server

Operator  : collect2
Number    : 1
Signature : dfmatrix x string x int -> dfarray
Example   : query size(s7 partition["m7", hashvalue(.Attr,23),  0]  collect2["mys7", 1238] )
Result    : bug
Remark    : requires a remote server

Operator  : collectB
Number    : 1
Signature : dfmatrix x string x int [ (int -> real) ] -> dfarray
Example   : query size(s7 partition["m7", hashvalue(.Attr,23),  0]  collectB["mys7", 1238] )
Result    : bug
Remark    : requires a remote server

Operator  : collectB
Number    : 2
Signature : dfmatrix x string x int [ (int -> real) ] -> dfarray
Example   : query size(s7 partition["m7", hashvalue(.Attr,23),  0]  collectB["mys7", 1238, fun(i: int) 1.0 * i * i] )
Result    : bug
Remark    : requires a remote server

Operator  : collectD
Number    : 1
Signature : dfmatrix x string x int -> dfarray
Example   : query size(s7 partition["m7", hashvalue(.Attr,23),  0]  collectD["mys7", 1238] )
Result    : bug
Remark    : requires a remote server


Operator  : collectC
Number    : 1
Signature : dfmatrix x string x int  x vector(int) -> dfarray
Example   : query size(s7 partition["m7", hashvalue(.Attr,23),  0]  collectC["mys7", 1238, Mapping] )
Result    : bug
Remark    : requires a remote server

Operator  : areduce
Number    : 1
Signature : dfmatrix(rel(x))  x string x (fsrel(x)-Y) x int -> d[f]array
Example   : query m8 areduce["a9", . feed count, 1236] getValue
Result    : bug
Remark    : under develeopment

Operator  : areduce2
Number    : 1
Signature : dfmatrix(rel(X)) x  dfmatrix(rel(Y)) x string x (fsrel(X) x fsrel(Y) ->Z) x int -> d[f]array(Z)
Example   : query m8a m8b  areduce2["a9", . feed  ..  feed product count, 1236] getValue
Result    : bug
Remark    : under develeopment

Operator  : areduce2F
Number    : 1
Signature : dfmatrix(rel(X)) x  dfmatrix(rel(Y)) x string x (fsrel(X) x fsrel(Y) ->Z) x int -> d[f]array(Z)
Example   : query m8a m8b  areduce2F["a9", . feed  ..  feed product count, 1236, fun(x1 : int, x2 : int) x1 * x2] getValue
Result    : bug
Remark    : under develeopment

Operator  : AREDUCEARG1 
Number    : 1
Signature : dfmatrix(rel(x))  x  ... -> stream(x)
Example   : query m8 areduce["a9", . feed count, 1236] getValue
Result    : bug
Remark    : Type mapping operator

Operator  : AREDUCEARG2
Number    : 1
Signature : ANY  x  dfmatrix(rel(x)) x ... -> stream(x)
Example   : query m8a m8b  areduce2["a9", . feed .. feed   product count, 1236] getValue
Result    : bug
Remark    : type mapping operator, remote server required

Operator  : SUBTYPE1
Number    : 1
Signature : a(b) x ... -> b
Example   : query a1 partitionF["a2",  . feed head[23], hashvalue(..AttrName, 13), 0]
Result    : bug
Remark    : under development

Operator  : FFR
Number    : 1
Signature : d[f]array(rel(X)) x X -> stream(X) , A x B x ( C [x D] -> stream(tuple(Z)) ) -> tuple(Z)
Example   : query a1 partitionF["", . feed head[23], hashvalue(..AttrName, 13), 0]
Result    : bug
Remark    : under development


Operator  : partitionF
Number    : 1
Signature : d[f]array(A) x string x ( A -> B ) , (B -> int) x int -> dfmatrix
Example   : query a1 partitionF["a2", . feed head[23], hashvalue(..AttrName, 13), 0]
Result    : bug
Remark    : under development


Operator  : saveAttr
Number    : 1 
Signature : DATA x {string, text} -> bool
Example   : query 6 saveAttr["six.bin"]
Result    : TRUE

Operator  : loadAttr
Number    : 1 
Signature : {string, text} -> DATA
Example   : query 6 saveAttr["six.bin"]
Result    : TRUE
Remark    : Store attribute in first test

Operator  : loadAttr
Number    : 2
Signature : {string, text} -> DATA
Example   : query loadAttr("six.bin")
Result    : 6


Operator  : createFrel
Number    : 1
Signature : {string,text} -> frel
Example   : query createFrel("ten.bin")
Result    : unpredictable
Remark    : depends on the existence and content of file ten.bin


Operator  : createFrel
Number    : 2
Signature : {string, text} x rel(tuple(X)) -> frel(tuple(X))
Example   : query createFrel("ten.bin", ten)
Result    : ( (frel (tuple ( (No int)))) 'ten.bin') 

Operator  : createFrel
Number    : 3
Signature : {string, text} x rel(tuple(X)) x bool -> frel(tuple(X))
Example   : query createFrel("ten.bin", ten, FALSE)
Result    : unpredictable
Remark    : depends on the existence and content of file ten.bin

Operator  : createFSrel
Number    : 1
Signature : stream({text,string}) x rel(x) -> fsrel(x)
Example   : query getDirectory(".") filter[ basename(.) startsWith "strassen"] createFSrel[strassen]
Result    : unpredictable
Remark    : result depends of existence of certain files


Operator  : saveObjectToFile
Number    : 1
Signature : D x {string, text} -> fobj(D)
Example   : query ten saveObjectToFile["ten.file"]
Result    : ( (fobj (rel (tuple ( (No int))))) 'ten.file') 



Operator  : getObjectFromFile
Number    : 1
Signature : {string, text, fobj(X)} -> X
Example   : query "strassen.bin" getObjectFromFile count
Result    : 3212

Operator  : dmap2
Number    : 1
Signature : d[f]array^X x string x fun( K_i .. k_X -> r) -> df[f]array(r)
Example   : query dfa1 dfa2  dmap2["da3", . feed  .. feed  product, 1238 ]
Result    : bug
Remark    : under construction


Operator  : dmap3
Number    : 1
Signature : d[f]array^3 x string x fun( K_i .. k_3 -> r) -> df[f]array(r)
Example   : query dfa1 dfa2  dfa3 dmap3["dfa59", . feed  .. feed  product $3 concat , 1238 ]
Result    : bug
Remark    : under construction


Operator  : dmap4
Number    : 1
Signature : d[f]array^4 x string x fun( K_i .. k_4 -> r) -> df[f]array(r)
Example   : query dfa1 dfa2  dfa3 dfa4 dmap4["dfa59", . feed  .. feed  product $3 feed concat $4 feed concat , 1238 ]
Result    : bug
Remark    : under construction

Operator  : dmap5
Number    : 1
Signature : d[f]array^5 x string x fun( K_i .. k_5 -> r) -> d[f]array(r)
Example   : query dfa1 dfa2  dfa3 dfa4 idfa5 dmap5["dfa59", $1 + $2 + $3 + $4 +$5 , 1238 ]
Result    : bug
Remark    : under construction

Operator  : dmap6
Number    : 1
Signature : d[f]array^6 x string x fun( K_i .. k_6 -> r) -> d[f]array(r)
Example   : query dfa1 dfa2  dfa3 dfa4 dfa5 dfa6 dmap6["dfa59", $1 + $2 + $3 + $4 + $5 + $6 , 1238 ]
Result    : bug
Remark    : under construction


Operator  : dmap7
Number    : 1
Signature : d[f]array^7 x string x fun( K_i .. k_7 -> r) -> d[f]array(r)
Example   : query dfa1 dfa2  dfa3 dfa4 dfa5 dfa6 dfa7 dmap7["dfa59", $1 + $2 + $3 + $4 + $5 + $6 + $7, 1238 ]
Result    : bug
Remark    : under construction

Operator  : dmap8
Number    : 1
Signature : d[f]array^8 x string x fun( K_i .. k_8 -> r) -> d[f]array(r)
Example   : query dfa1 dfa2  dfa3 dfa4 dfa5 dfa6 dfa7 dfs8 dmap8["dfa59", $1 + $2 + $3 + $4 + $5 + $6 + $7 - $8, 1238 ]
Result    : bug
Remark    : under construction


Operator  : pdmap2
Number    : 1
Signature : d[f]array^X x string x fun( K_i .. k_X -> r) -> df[f]array(r)
Example   : query intstream(0,10) filter[ (. mod 3 ) = 0] dfa1 dfa2  pdmap2["da3", . feed  .. feed  product, 1238 ]
Result    : bug
Remark    : under construction


Operator  : pdmap3
Number    : 1
Signature : d[f]array^3 x string x fun( K_i .. k_3 -> r) -> df[f]array(r)
Example   : query intstream(0,10) filter[ (. mod 3 ) = 0] dfa1 dfa2  dfa3 pdmap3["dfa59", . feed  .. feed  product $3 concat , 1238 ]
Result    : bug
Remark    : under construction


Operator  : pdmap4
Number    : 1
Signature : d[f]array^4 x string x fun( K_i .. k_4 -> r) -> df[f]array(r)
Example   : query intstream(0,10) filter[ (. mod 3 ) = 0] dfa1 dfa2  dfa3 dfa4 pdmap4["dfa59", . feed  .. feed  product $3 feed concat $4 feed concat , 1238 ]
Result    : bug
Remark    : under construction

Operator  : pdmap5
Number    : 1
Signature : d[f]array^5 x string x fun( K_i .. k_5 -> r) -> d[f]array(r)
Example   : query intstream(0,10) filter[ (. mod 3 ) = 0] dfa1 dfa2  dfa3 dfa4 idfa5 pdmap5["dfa59", $1 + $2 + $3 + $4 +$5 , 1238 ]
Result    : bug
Remark    : under construction

Operator  : pdmap6
Number    : 1
Signature : d[f]array^6 x string x fun( K_i .. k_6 -> r) -> d[f]array(r)
Example   : query intstream(0,10) filter[ (. mod 3 ) = 0] dfa1 dfa2  dfa3 dfa4 dfa5 dfa6 pdmap6["dfa59", $1 + $2 + $3 + $4 + $5 + $6 , 1238 ]
Result    : bug
Remark    : under construction


Operator  : pdmap7
Number    : 1
Signature : d[f]array^7 x string x fun( K_i .. k_7 -> r) -> d[f]array(r)
Example   : query intstream(0,10) filter[ (. mod 3 ) = 0] dfa1 dfa2  dfa3 dfa4 dfa5 dfa6 dfa7 pdmap7["dfa59", $1 + $2 + $3 + $4 + $5 + $6 + $7, 1238 ]
Result    : bug
Remark    : under construction

Operator  : pdmap8
Number    : 1
Signature : d[f]array^8 x string x fun( K_i .. k_8 -> r) -> d[f]array(r)
Example   : query intstream(0,10) filter[ (. mod 3 ) = 0] dfa1 dfa2  dfa3 dfa4 dfa5 dfa6 dfa7 dfs8 pdmap8["dfa59", $1 + $2 + $3 + $4 + $5 + $6 + $7 - $8, 1238 ]
Result    : bug
Remark    : under construction

Operator  : dproduct
Number    : 1
Signature : d[f]array(rel T1) x d[f]array(rel T2)  x string x fun( stream(T1) x stream(T2) -> r) -> df[f]array(r)
Example   : query dfa1 dfa2  dproduct["da3", .   ..   product, 1238 ]
Result    : bug
Remark    : under construction

Operator  : ddistribute8
Number    : 1
Signature : stream(tuple) x string x (tuple -> int) x (tuple->int) x int x int x rel -> array(darray(rel(tuple)))
Example   : query plz feed ddistribute8["ddplz", .PLZ , hashvalue(.Ort,2000), 5, 4, workers]
Result    : bug
Remark    : under construction


Operator  : dfdistribute8
Number    : 1
Signature : stream(tuple) x string x (tuple -> int) x (tuple->int) x int x int x rel -> array(dfarray(rel(tuple)))
Example   : query plz feed dfdistribute8["dfdplz", .PLZ , hashvalue(.Ort,2000), 5, 4, workers]
Result    : bug
Remark    : under construction


Operator  : partition8Local
Number    : 1
Signature : stream(tuple) x (tuple-int) x (tuple->int) x text x string x int x int x int -> stream(tuple)
Example   : query plz feed partition8Local[ .PLZ, hashvalue(.Ort,23698), 'temp', "plz_p8l", 4, 12, 1] count = plz count
Result    : TRUE


Operator  : partitionF8
Number    : 1
Signature : d[f]array(rel(tuple(X))) x string x (rel(tuple(X)) -> stream(Tuple(Y))) x (tuple(Y) -> int) x (tuple(Y)->int) x int x int -> array(dfmatrix(rel(tuple(Y))))
Example   : query da1 partitionF8["newName", . feed addcounter[C,1] , .PLZ , .C , 4, 12]
Result    : bug
Remark    : remote server required


Operator  : da2enableLog
Number    : 1
Signature : bool -> bool
Example   : query da2enableLog(TRUE)
Result    : TRUE

Operator  : da2clearLog
Number    : 1
Signature : -> bool
Example   : query da2clearLog()
Result    : TRUE

Operator  : da2Log
Number    : 1
Signature : -> stream(tuple(...))
Example   : query da2Log() count
Result    : unpredictable
Remark    : depends on former executed operations

Operator  : deleteRemoteDatabases
Number    : 1
Signature : string x rel -> stream(tuple)
Example   : query deleteRemoteDatabases("berlintest", workers)
Result    : crashes
Remark    : Not a good idea to test this dangerous operator


Operator : writeRel
Number   : 1
Signature : rel x {string, text} -> bool
Example   : query ten writeRel['ten.bin']
Result    : TRUE


Operator  : write2
Number    : 1
Signature : stream(tuple(X)) -> real(tuple(X))
Example   : query ten feed write2 count
Result    : 10

Operator  : write3
Number    : 1
Signature : stream(tuple(X)) -> real(tuple(X))
Example   : query ten feed write3 count
Result    : 10

Operator  : db2tryReconnect
Number    : 1
Signature : bool -> bool
Example   : query db2tryReconnect(TRUE)
Result    : TRUE


Operator : setHeartbeat
Number   : 1
Signature : int -> bool
Example  : query setHeartbeat(4)
Result   : TRUE

Operator : setTimeout
Number   : 1
Signature : int -> bool
Example   : query setTimeout(15)
Result    : TRUE

Operator : db2LogToFile
Number   : 1
Signature : -> bool | {string, text} -> bool
Example   : query db2LogToFile()
Result    : TRUE


Operator  : enableDFSFT
Number    : 1
Signature :  {string, text} x int -> bool
Example   : query enableDFSFT('localhost',4444)
Result    : unpredictable
Remark    : Depends on the presence of a distributed file system

Operator  : disableDFSFT
Number    : 1
Signature :  -> bool
Example   : query disableDFSFT()
Result    : unpredictable
Remark    : Depends on the presence of a distributed file system


Operator  : removeTempInDFS
Number    : 1
Signature : -> int
Example   : query removeTempInDFS()
Result    : unpredictable
Remark    : depends on the presence of a distributed file system

Operator  : removeDFSFilesInDB
Number    : 1
Signature : -> bool
Example   : query removeDFSFilesInDB() 
Result    : unpredictable
Remark    : depends on the presence of a distributed file system


Operator  : removeAllDFSFiles
Number    : 1
Signature : -> bool
Example   : query removeAllDFSFiles()
Result    : unpredictable
Remark    : depends on the presence of a distributed file system

Operator  : createintdarray
Number    : 1
Signature : rel x string -> darray(int)
Example   : query createintdarray("controlArray", workerrel)
Result    : unpredictable
Remark    : required the presence of a distributed secondo

Operator  : createintdarray
Number    : 2
Signature : rel x string  x int -> darray(int)
Example   : query createintdarray("controlArray", workerrel, 42)
Result    : unpredictable
Remark    : required the presence of a distributed secondo


Operator  : dcommand
Number    : 1
Signature : d[f]array x {string,text} -> stream(tuple)
Example   : query darray1 dcommand['let x = 23'] consume
Result    : unpredictable
Remark    : required the presence of a distributed secondo

Operator  : dcommand2
Number    : 1
Signature : d[f]array x {string,text} -> d[f]array
Example   : query darray1 dcommand2['let x = 23'] 
Result    : unpredictable
Remark    : required the presence of a distributed secondo

Operator  : dlet
Number    : 1
Signature : d[f]array x string  x {string,text} -> stream(tuple)
Example   : query darray1 dlet["x", '42 + 0'] consume
Result    : unpredictable
Remark    : required the presence of a distributed secondo


Operator  : makeSimple
Number    : 1
Signature : darray x bool [x string] -> sdarray
Example   : query da1 makeSimple[TRUE]
Result    : bug
Remark    : presence of an distributed secondo required

Operator  : makeDArray
Number    : 1
Signature : sdarray x bool [x string] -> darray
Example   : query sda1 makeDArray[TRUE]
Result    : bug
Remark    : presence of an distributed secondo required

Operator  : makeShort
Number    : 1
Signature : d[f]array x string x bool -> d[f]array
Example   : query da1 makeShort["da1short", TRUE]
Result    : bug
Remark    : presence of an distributed secondo required


Operator  : createSDArray
Number    : 1
Signature : string x rel -> sdarray
Example   : query createSDArray("myObject", workers)
Result    : bug
Remark    : presence of an distributed Secondo required


Operator  : slotSizes
Number    : 1
Signature : dfmatrix -> stream(tuple)
Example   : query dfm27 slotSizes consume 
Result    : bug
Remark   : presence of a distributed secondo required


Operator  : loadBalance 
Number    : 1
Signature : stream(real) x int x bool -> stream(int)
Example   : query realstream(201.0,400.0,1.0) loadBalance[40, FALSE] count 
Result    : 200
Remark   : presence of a distributed secondo required


Operator  : fileSizes
Number    : 1
Signature : stream({string,text}) x bool -> stream(int)
Example   : query "ten.bin" feed  fileSizes[FALSE] count
Result    : 1 

Operator  : getWorkersForHost
Number    : 1 
Signature : {darray,dfarray,dfmatrix,pdarray,pdfarray,sdarray} x {string,text} -> stream(int)
Example   : query myarray getWorkersForHost['localhost'] consume
Result    : unpredictable
Remark    : requires a distributed secondo setup 

Operator  : setHostForWorker 
Number    : 1 
Signature : {darray,dfarray,dfmatrix,pdarray,pdfarray,sdarray} x int x {string,text} -> bool
Example   : query myarray setHostForWorker[0,'localhost'] 
Result    : unpredictable
Remark    : requires a distributed secondo setup 

